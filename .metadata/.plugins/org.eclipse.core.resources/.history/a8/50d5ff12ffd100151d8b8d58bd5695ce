package hackerRank;

public class Frog {

	public static void main(String[] args) {

		int A[] =  {1 , 3, 1, 4, 2,5 };
		solution(A, A.length, 7, 3) ;
	}

	static int solution(int A[], int N, int X, int D) {

		// Index is position, element is time
		int positionArray[] = new int[ X ] ;

		for (int i = 0; i < positionArray.length; i++) {
			positionArray[i] = -1 ; //sentinel
		}

		int index ;
		for (int time = 0; time < A.length; time++) {
			if( positionArray[A[time] ] == -1 ){
				index = A[ time] ;
				positionArray[A[time]] = time ;
			}
		}

		// Debugging
		for (int i = 0; i < positionArray.length; i++) {
			System.out.println(positionArray[i]) ;
		}

		int currentPos = 0 ;
		for( int k = 1; k <= D; k++){
			if( findLeastTime( positionArray, currentPos+1, D) > 0){
				currentPos = 
			}
		}

		return 0;
	}
	/**
	 * This method finds the min element from the array in the range currenPos to D( inclusive)
	 * @param positionArray
	 * @param currentPos
	 * @param D
	 * @return
	 */
	
	private static int findLeastTime(int[] positionArray, int currentPos, int D) {
		int min  = 0 ;
		for (int i = 0; i < D; i++) {
			if(positionArray[i] !=-1 && positionArray[i] < min){
				min = positionArray[i] ;
			}
		}
		return min ;
	}

	private static int findMaxValueOfTime(int[] a) {
		return 0;
	}

}
