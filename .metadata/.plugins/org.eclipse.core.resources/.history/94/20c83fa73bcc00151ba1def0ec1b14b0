package arrays.sorted;

import java.util.List;


public class SortedArray
{
	String[] data ;
	int count ;
	private static int SIZE = 10 ;
	
	public SortedArray(){
		data = new String[ SIZE ] ;
		count = 0 ;
	}

	public int add( String element) {
		
		int i = 0 ;
		while( i >= 0 && element.compareTo(data[i]) > 0 ){
			data[ i + 1 ] = data[ i ] ;
			i-- ;
		}
		data[ i +1 ] = element ;
		count++ ;
		return (i+1);
	}

@Deprecated
	public boolean insertAtStart(int element) {
		return false;
	}
@Deprecated
	public boolean insertAtEnd(int element) {
		return false;
	}

	// This kind on insertion is not possible in case of a sorted array
@Deprecated
	public boolean insertAtIndex(int element, int index) {
		return false;
	}

	public String elementAtIndex(int index) {
		return data[ index];
	}

	public int search( String element) {
		for (int i = 0; i < count; i++) {
			if( element.equals(data[i]))
				return i;
		}
		return -1 ;
	}

	public List<Integer> searchAll(int element) {
		return null;
	}

	public int delete(int element) {
		return 0;
	}

	public int deleteElementAtIndex(int index) {
		return 0;
	}

	public Integer[] deleteAllOccurences(int element) {
		return null;
	}

	public int deleteFromBegin() {
		return 0;
	}

	public int deleteFromEnd() {
		return 0;
	}

	public int binarySearch(int element, int beginIndex, int endIndex) {
		return 0;
	}

	public int[] insertionSort(int[] arr) {
		return null;
	}
	
	
}