package arrays.sorted;

import java.util.List;

public class DynamicArray implements IArray {

	// Keeps a count of the actual no of elements in the array at any given time.
	public int count ; 
	public int data[] ;
	public int incrementValue ;
	public static int DEFAULT_SIZE = 10 ;

	public DynamicArray(){
		this(0, 0) ;
	}

	public DynamicArray( int size ){
		this( size, DEFAULT_SIZE) ;
	}

	public DynamicArray( int size, int incrementValue ){
		this.count = 0 ;
		this.incrementValue = incrementValue ;
		this.data = new int[ size ] ;
	}

	public boolean add(int element) {
		if( isFull())
			return false;
		else{
			data[count] = element ;
			count++ ;
			return true ;
		}

	}

	public boolean insertAtStart(int element) {
		return false;
	}

	public boolean insertAtEnd(int element) {
		return false;
	}

	public boolean insertAtIndex(int element, int index) {
		return false;
	}

	public int elementAtIndex(int index) {
		return 0;
	}

	public int search(int element) {
		return 0;
	}

	public List<Integer> searchAll(int element) {
		return null;
	}

	public int delete(int element) {
		return 0;
	}

	public int deleteElementAtIndex(int index) {
		return 0;
	}

	public Integer[] deleteAllOccurences(int element) {
		return null;
	}

	public int deleteFromBegin() {
		int deleted ;
		if( isEmpty()){
			System.out.println("Array is empty, nothing to delete.") ;
			deleted = -1 ;
		}else{
			deleted = data[0] ;
			int index = 0 ;
			while( index < count-1){
				data[ index ] = data[ index + 1 ] ;
				index++ ;
			}
			count-- ;
		}
		return deleted ;
	}

	public int deleteFromEnd() {
		int deleted = data[count-1] ;
		count--;
		return deleted ;
	}

	public int binarySearch(int element, int beginIndex, int endIndex) {
		return 0;
	}

	public int[] insertionSort(int[] arr) {
		return null;
	}

	private boolean isFull(){
		return ( count % DEFAULT_SIZE == 0 ) ; 
	}
	
	private boolean isEmpty(){
		return( count == 0 ? true : false ) ;
	}
}
