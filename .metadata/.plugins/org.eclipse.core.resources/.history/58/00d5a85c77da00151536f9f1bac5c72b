package binary.search.trees;


public class BinarySearchTrees implements IBinarySearchTree {


	/**
	 *  This method looks up the entire binary tree for an appropriate 
	 *  position for inserting the data.
	 *  It then returns the root ( may or may not have been modified)
	 *  
	 *  Each call to insert function returns the reference 
	 *  to the newly created node.
	 */
	public BSTNode insert(BSTNode root, BSTNode newNode) {

		if ( root == null){
			root = newNode ;
		}
		else if( newNode.data <= root.data){
			root.left = insert(root, newNode) ;
		}else{
			root.right = insert(root, newNode) ;
		}

		return root ;
	}

	/**
	 *  This method looks up the entire binary tree for the data.
	 *  It does so by first looking at the root, then recursively 
	 *  looking at the left & right subtrees. 
	 */

	public boolean search(BSTNode root, int data) {

		if( root == null)
			return false ;

		if( root.data == data )
			return true ;

		else if( data < root.data)
			return search(root.left, data) ;

		else 
			return search(root.right, data) ;

	}

	public BSTNode delete(BSTNode root, int data) {

		BSTNode prev = root ;

		if( root == null)
			return null ;

		else if( data < root.data){
			root.left = delete(root.left, data) ;
		}else if( data > root.data){
			root.right = delete(root.right, data) ;
		}else if( root.data == data){
			// Node to be deleted is found.
			//			if( )
		}
		return null ;
	}


	public int size( BSTNode root){

		if( root == null)
			return 0 ;

		return ( 1 + size( root.left) + size(root.right) );
	}

	public int minValue( BSTNode root){

	}

	public int minValue_rec( BSTNode root){

	}


}
