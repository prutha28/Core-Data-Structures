package heap;


public class MaxHeap extends Heap{

	/**
	 * Given an array A, that represents the heap data and the index i, 
	 * make sure the array is converted to a max heap. 
	 * 
	 * To maxheapify at index i, the algo assumes that both the children of the element indexed at i, are 
	 * themselves max heaps.
	 * @param A
	 * @param i
	 */
	
	public void maxHeapify( int i){

		
		int l = left(i) ; // index of left child
		int r = right(i) ; // index of right child
		int largest = i ;
		
		if( l < heapSize && heapArray[l] > heapArray[i]){
			largest = l ;
		}
		
		if( r < heapSize && heapArray[r] > heapArray[largest]){
			largest = r ;
		}
		
		if( largest != i){
			// Swap A[largest] & A[i]
			int temp = heapArray[i] ;
			heapArray[i] = heapArray[largest] ;
			heapArray[largest] = temp ;
			maxHeapify( largest) ;
		}
	}
	
	
	public void buildMaxHeap( int A[]){
		int i = lastNonLeafIndex() ;
		while( i >= 0 ){
			maxHeapify( i) ;
			i-- ;
		}
	}
	
	
	public int lastNonLeafIndex(){
		return ((heapSize/2) -1 ) ;
	}
}
