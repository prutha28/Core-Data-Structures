package binary.search.trees;


public class BinarySearchTrees implements IBinarySearchTree {

	BSTNode root = null ;
	/**
	 *  This method looks up the entire binary tree for an appropriate 
	 *  position for inserting the data.
	 *  It then returns the root ( may or may not have been modified)
	 *  
	 *  Each call to insert function returns the reference 
	 *  to the newly created node.
	 */

	public BSTNode insert(BSTNode root, int data ) {

		BSTNode newNode = new BSTNode(data) ;

		if ( root == null){
			root = newNode ;
		}
		else if( newNode.data <= root.data){
			root.left = insert(root.left, data) ;
		}else{
			root.right = insert(root.right, data) ;
		}

		return root ;
	}

	/**
	 *  This method looks up the entire binary tree for the data.
	 *  It does so by first looking at the root, then recursively 
	 *  looking at the left & right subtrees. 
	 */

	public boolean search(BSTNode root, int data) {

		if( root == null)
			return false ;

		if( root.data == data )
			return true ;

		else if( data < root.data)
			return search(root.left, data) ;

		else 
			return search(root.right, data) ;

	}


	/**
	 *  Each step of recursion, returns the root of the subtree after the deletion. 																																																																							
	 */
	public BSTNode delete(BSTNode root, int data) {

		if( root == null)
			return null ;

		else if( data < root.data){
			// The data to be deleted is in the left subtree. 
			// The appropriate node is deleted and the root of the tree the remains after deletion is returned.
			root.left = delete(root.left, data) ;

		}else if( data > root.data){
			root.right = delete(root.right, data) ;
		}else if( root.data == data){

			// Node to be deleted is found.
			
			// Case 1: node having no children/leaf node.
			if( root.left == null && root.right == null ){
				// Root of the subtree after deleting the node to be deleted is null
				return null ;
			}

			// Case 2: Node to be deleted has exactly 1 child.
			else if( root.left != null && root.right == null ){
				// Return the child node as it will now be the new root.
				return root.left ;
			}

			else if( root.left == null && root.right != null ){
				//Return the child node as it will now be the new root.
				return root.right ;
			}

			// Case 3: Node to be deleted has exactly 2 children.
			else if( root.left != null && root.right != null ){
				// 1. Find the node in the right subtree that has the min value.
				BSTNode minNode = this.minNode(root.right) ;
				// 2. Replace the value of the root node with that min value.
				root.data = minNode.data ;
				// 3. Now that min value will appear as a duplicate in the right subtree. Delete that value from the right subtree recursively.
				return delete(root.right, minNode.data) ;
			}
		}else{
			// node to be deleted is not found.
			return null ;
		}
	}


	public int size( BSTNode root){

		if( root == null)
			return 0 ;

		return ( 1 + size( root.left) + size(root.right) );
	}

	public int minValue( BSTNode root){
		BSTNode current = root ;

		while( current.left != null){
			current = current.left ;
		}

		return current.data ;
	}

	public BSTNode minNode( BSTNode root){
		BSTNode current = root ;

		while( current.left != null){
			current = current.left ;
		}

		return current ;
	}

	public int maxValue( BSTNode root){
		BSTNode current = root ;

		while( current.right != null){
			current = current.right ;
		}

		return current.data ;
	}

	public int minValue_rec( BSTNode root){

		if( root == null)
			return 0;

		if( root.left == null && root.right == null)
			return root.data ;

		else
			return minValue_rec(root.left) ;
	}

	// Traversals
	public void inorderTraversal( BSTNode root){

		if( root == null)
			return ;
		inorderTraversal(root.left) ;
		System.out.print(root.data + " ");
		inorderTraversal(root.right) ;
	}

	public void preorderTraversal( BSTNode root){
		if( root == null)
			return ;
		System.out.print(root.data + " ");
		inorderTraversal(root.left) ;
		inorderTraversal(root.right) ;
	}

	public void postorderTraversal( BSTNode root){
		if( root == null)
			return ;
		inorderTraversal(root.left) ;
		inorderTraversal(root.right) ;
		System.out.print(root.data + " ");
	}
}
