package binary.search.trees;

public class BSTUtils {

	public int size( BSTNode root){

		if( root == null)
			return 0 ;

		return ( 1 + size( root.left) + size(root.right) );
	}

	public int minValue( BSTNode root){
		BSTNode current = root ;

		while( current.left != null){
			current = current.left ;
		}

		return current.data ;
	}

	public BSTNode minNode( BSTNode root){
		BSTNode current = root ;

		while( current.left != null){
			current = current.left ;
		}

		return current ;
	}

	public int maxValue( BSTNode root){
		BSTNode current = root ;

		while( current.right != null){
			current = current.right ;
		}

		return current.data ;
	}

	public int minValue_rec( BSTNode root){

		if( root == null)
			return 0;

		if( root.left == null && root.right == null)
			return root.data ;

		else
			return minValue_rec(root.left) ;
	}

	// Traversals
	public void inorderTraversal( BSTNode root){

		if( root == null)
			return ;
		inorderTraversal(root.left) ;
		System.out.print(root.data + " ");
		inorderTraversal(root.right) ;
	}

	public void preorderTraversal( BSTNode root){
		if( root == null)
			return ;
		System.out.print(root.data + " ");
		inorderTraversal(root.left) ;
		inorderTraversal(root.right) ;
	}

	public void postorderTraversal( BSTNode root){
		if( root == null)
			return ;
		inorderTraversal(root.left) ;
		inorderTraversal(root.right) ;
		System.out.print(root.data + " ");
	}

	public BSTNode mirror( BSTNode root){

		if( root == null )
			return null ;

//		if( root.right == null && root.left == null){
//			return root ;
//		}
//
//		else if( root.right == null && root.left != null){
//			root.right = root.left ;
//			root.left = null ;
//		}
//		else if( root.right != null && root.left == null){
//			root.left = root.right ;
//			root.right = null ;
//		}
		else{
			BSTNode temp = root.left ;
			root.left = root.right ;
			root.right = temp;
			mirror(root.right) ;
			mirror(root.left) ;
		}
		return root ;
	}

	
	public BSTNode doubleTree( BSTNode root ){
		
		if( root == null){
			return null ;
		}
	}

}
